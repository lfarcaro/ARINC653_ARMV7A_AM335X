#ifndef ARINC653_H_
#define ARINC653_H_

// ARINC653 port includes
#include "arinc653_port_types.h"

// -------------------- STANDARD APEX START --------------------

// Global
typedef enum {
	NO_ERROR = 1, NO_ACTION, NOT_AVAILABLE, INVALID_PARAM, INVALID_CONFIG, INVALID_MODE, TIMED_OUT
} RETURN_CODE_TYPE;
typedef portINT64 SYSTEM_TIME_TYPE; // Signed 64-bit integer in nanoseconds
#define MAX_NAME_LENGTH 30

// Partition and process management
typedef portUINTBASE LOCK_LEVEL_TYPE;
#define MAX_LOCK_LEVEL 16

// Process management and health monitoring
typedef portSIZE STACK_SIZE_TYPE;
typedef portADDRESS SYSTEM_ADDRESS_TYPE;

// Partition management
typedef enum {
	IDLE = 1, COLD_START, WARM_START, NORMAL
} OPERATING_MODE_TYPE;
typedef portIDENTIFIER PARTITION_ID_TYPE;
typedef portCHARACTER *PARTITION_NAME_TYPE;
typedef enum {
	NORMAL_START = 1, PARTITION_RESTART, HM_MODULE_RESTART, HM_PARTITION_RESTART
} START_CONDITION_TYPE;
struct _PARTITION_STATUS_TYPE {
	PARTITION_ID_TYPE IDENTIFIER;
	SYSTEM_TIME_TYPE PERIOD;
	SYSTEM_TIME_TYPE DURATION;
	LOCK_LEVEL_TYPE LOCK_LEVEL;
	OPERATING_MODE_TYPE OPERATING_MODE;
	START_CONDITION_TYPE START_CONDITION;
};
typedef struct _PARTITION_STATUS_TYPE PARTITION_STATUS_TYPE;

// Process management
typedef portIDENTIFIER PROCESS_ID_TYPE;
typedef portCHARACTER *PROCESS_NAME_TYPE;
typedef portUINTBASE PRIORITY_TYPE;
#define MIN_PRIORITY_VALUE 1
#define MAX_PRIORITY_VALUE 63
typedef enum {
	DORMANT = 1, READY, RUNNING, WAITING
} PROCESS_STATE_TYPE;
typedef enum {
	SOFT = 1, HARD
} DEADLINE_TYPE;
struct _PROCESS_ATTRIBUTE_TYPE {
	PROCESS_NAME_TYPE NAME;
	SYSTEM_ADDRESS_TYPE ENTRY_POINT;
	STACK_SIZE_TYPE STACK_SIZE;
	PRIORITY_TYPE BASE_PRIORITY;
	SYSTEM_TIME_TYPE PERIOD;
	SYSTEM_TIME_TYPE TIME_CAPACITY;
	DEADLINE_TYPE DEADLINE;
};
typedef struct _PROCESS_ATTRIBUTE_TYPE PROCESS_ATTRIBUTE_TYPE;
struct _PROCESS_STATUS_TYPE {
	PROCESS_ATTRIBUTE_TYPE ATTRIBUTES;
	PRIORITY_TYPE CURRENT_PRIORITY;
	SYSTEM_TIME_TYPE DEADLINE_TIME;
	PROCESS_STATE_TYPE PROCESS_STATE;
};
typedef struct _PROCESS_STATUS_TYPE PROCESS_STATUS_TYPE;

// Time management
#define INFINITE_TIME_VALUE ((SYSTEM_TIME_TYPE) -1)

// Interpartition and intrapartition communication
typedef portSIZE MESSAGE_RANGE_TYPE;
typedef portSIZE WAITING_RANGE_TYPE;
typedef enum {
	FIFO = 1, PRIORITY
} QUEUING_DISCIPLINE_TYPE;

// Interpartition communication
typedef portCHARACTER *MESSAGE_ADDR_TYPE;
typedef portSIZE MESSAGE_SIZE_TYPE;
typedef enum {
	SOURCE = 1, DESTINATION
} PORT_DIRECTION_TYPE;
// Interpartition communication - Sampling ports
typedef portIDENTIFIER SAMPLING_PORT_ID_TYPE;
typedef portCHARACTER *SAMPLING_PORT_NAME_TYPE;
typedef enum {
	INVALID = 1, VALID
} VALIDITY_TYPE;
struct _SAMPLING_PORT_STATUS_TYPE {
	MESSAGE_SIZE_TYPE MAX_MESSAGE_SIZE;
	PORT_DIRECTION_TYPE PORT_DIRECTION;
	SYSTEM_TIME_TYPE REFRESH_PERIOD;
	VALIDITY_TYPE LAST_MSG_VALIDITY;
};
typedef struct _SAMPLING_PORT_STATUS_TYPE SAMPLING_PORT_STATUS_TYPE;
// Interpartition communication - Queuing ports
typedef portIDENTIFIER QUEUING_PORT_ID_TYPE;
typedef portCHARACTER *QUEUING_PORT_NAME_TYPE;
struct _QUEUING_PORT_STATUS_TYPE {
	MESSAGE_RANGE_TYPE NB_MESSAGE;
	MESSAGE_RANGE_TYPE MAX_NB_MESSAGE;
	MESSAGE_SIZE_TYPE MAX_MESSAGE_SIZE;
	PORT_DIRECTION_TYPE PORT_DIRECTION;
	WAITING_RANGE_TYPE WAITING_PROCESSES;
};
typedef struct _QUEUING_PORT_STATUS_TYPE QUEUING_PORT_STATUS_TYPE;

// Intrapartition communication - Buffer services
typedef portCHARACTER *BUFFER_NAME_TYPE;
typedef portIDENTIFIER BUFFER_ID_TYPE;
struct _BUFFER_STATUS_TYPE {
	MESSAGE_RANGE_TYPE NB_MESSAGE;
	MESSAGE_RANGE_TYPE MAX_NB_MESSAGE;
	MESSAGE_SIZE_TYPE MAX_MESSAGE_SIZE;
	WAITING_RANGE_TYPE WAITING_PROCESSES;
};
typedef struct _BUFFER_STATUS_TYPE BUFFER_STATUS_TYPE;
// Intrapartition communication - Blackboard services
typedef portCHARACTER *BLACKBOARD_NAME_TYPE;
typedef portIDENTIFIER BLACKBOARD_ID_TYPE;
typedef enum {
	EMPTY = 1, OCCUPIED
} EMPTY_INDICATOR_TYPE;
struct _BLACKBOARD_STATUS_TYPE {
	EMPTY_INDICATOR_TYPE EMPTY_INDICATOR;
	MESSAGE_SIZE_TYPE MAX_MESSAGE_SIZE;
	WAITING_RANGE_TYPE WAITING_PROCESSES;
};
typedef struct _BLACKBOARD_STATUS_TYPE BLACKBOARD_STATUS_TYPE;
// Intrapartition communication - Semaphore services
typedef portCHARACTER *SEMAPHORE_NAME_TYPE;
typedef portIDENTIFIER SEMAPHORE_ID_TYPE;
typedef portUINTBASE SEMAPHORE_VALUE_TYPE;
struct _SEMAPHORE_STATUS_TYPE {
	SEMAPHORE_VALUE_TYPE CURRENT_VALUE;
	SEMAPHORE_VALUE_TYPE MAXIMUM_VALUE;
	WAITING_RANGE_TYPE WAITING_PROCESSES;
};
typedef struct _SEMAPHORE_STATUS_TYPE SEMAPHORE_STATUS_TYPE;
// Intrapartition communication - Event services
typedef portCHARACTER *EVENT_NAME_TYPE;
typedef portIDENTIFIER EVENT_ID_TYPE;
typedef enum {
	DOWN = 1, UP
} EVENT_STATE_TYPE;
struct _EVENT_STATUS_TYPE {
	EVENT_STATE_TYPE EVENT_STATE;
	WAITING_RANGE_TYPE WAITING_PROCESSES;
};
typedef struct _EVENT_STATUS_TYPE EVENT_STATUS_TYPE;

// Health monitoring
#define MAX_ERROR_MESSAGE_SIZE 64
typedef portCHARACTER ERROR_MESSAGE_TYPE[MAX_ERROR_MESSAGE_SIZE];
typedef portSIZE ERROR_MESSAGE_SIZE_TYPE;
typedef enum {
	DEADLINE_MISSED = 1, APPLICATION_ERROR, NUMERIC_ERROR, ILLEGAL_REQUEST, STACK_OVERFLOW, MEMORY_VIOLATION, HARDWARE_FAULT, POWER_FAIL
} ERROR_CODE_TYPE;
struct _ERROR_STATUS_TYPE {
	ERROR_CODE_TYPE ERROR_CODE;
	ERROR_MESSAGE_TYPE MESSAGE;
	ERROR_MESSAGE_SIZE_TYPE LENGTH;
	PROCESS_ID_TYPE FAILED_PROCESS_ID;
	SYSTEM_ADDRESS_TYPE FAILED_ADDRESS;
};
typedef struct _ERROR_STATUS_TYPE ERROR_STATUS_TYPE;

// Partition management
void GET_PARTITION_STATUS(PARTITION_STATUS_TYPE *PARTITION_STATUS, RETURN_CODE_TYPE *RETURN_CODE);
void SET_PARTITION_MODE(OPERATING_MODE_TYPE OPERATING_MODE, RETURN_CODE_TYPE *RETURN_CODE);

// Process management
void GET_PROCESS_ID(PROCESS_NAME_TYPE PROCESS_NAME, PROCESS_ID_TYPE *PROCESS_ID, RETURN_CODE_TYPE *RETURN_CODE);
void GET_PROCESS_STATUS(PROCESS_ID_TYPE PROCESS_ID, PROCESS_STATUS_TYPE *PROCESS_STATUS, RETURN_CODE_TYPE *RETURN_CODE);
void CREATE_PROCESS(PROCESS_ATTRIBUTE_TYPE *ATTRIBUTES, PROCESS_ID_TYPE *PROCESS_ID, RETURN_CODE_TYPE *RETURN_CODE);
void SET_PRIORITY(PROCESS_ID_TYPE PROCESS_ID, PRIORITY_TYPE PRIORITY, RETURN_CODE_TYPE *RETURN_CODE);
void SUSPEND_SELF(SYSTEM_TIME_TYPE TIME_OUT, RETURN_CODE_TYPE *RETURN_CODE);
void SUSPEND(PROCESS_ID_TYPE PROCESS_ID, RETURN_CODE_TYPE *RETURN_CODE);
void RESUME(PROCESS_ID_TYPE PROCESS_ID, RETURN_CODE_TYPE *RETURN_CODE);
void STOP_SELF(void);
void STOP(PROCESS_ID_TYPE PROCESS_ID, RETURN_CODE_TYPE *RETURN_CODE);
void START(PROCESS_ID_TYPE PROCESS_ID, RETURN_CODE_TYPE *RETURN_CODE);
void DELAYED_START(PROCESS_ID_TYPE PROCESS_ID, SYSTEM_TIME_TYPE DELAY_TIME, RETURN_CODE_TYPE *RETURN_CODE);
void LOCK_PREEMPTION(LOCK_LEVEL_TYPE *LOCK_LEVEL, RETURN_CODE_TYPE *RETURN_CODE);
void UNLOCK_PREEMPTION(LOCK_LEVEL_TYPE *LOCK_LEVEL, RETURN_CODE_TYPE *RETURN_CODE);
void GET_MY_ID(PROCESS_ID_TYPE *PROCESS_ID, RETURN_CODE_TYPE *RETURN_CODE);

// Time management
void TIMED_WAIT(SYSTEM_TIME_TYPE DELAY_TIME, RETURN_CODE_TYPE *RETURN_CODE);
void PERIODIC_WAIT(RETURN_CODE_TYPE *RETURN_CODE);
void GET_TIME(SYSTEM_TIME_TYPE *SYSTEM_TIME, RETURN_CODE_TYPE *RETURN_CODE);
void REPLENISH(SYSTEM_TIME_TYPE BUDGET_TIME, RETURN_CODE_TYPE *RETURN_CODE);

// Interpartition communication - Sampling ports
void CREATE_SAMPLING_PORT(SAMPLING_PORT_NAME_TYPE SAMPLING_PORT_NAME, MESSAGE_SIZE_TYPE MAX_MESSAGE_SIZE, PORT_DIRECTION_TYPE PORT_DIRECTION, SYSTEM_TIME_TYPE REFRESH_PERIOD, SAMPLING_PORT_ID_TYPE *SAMPLING_PORT_ID, RETURN_CODE_TYPE *RETURN_CODE);
void WRITE_SAMPLING_MESSAGE(SAMPLING_PORT_ID_TYPE SAMPLING_PORT_ID, MESSAGE_ADDR_TYPE MESSAGE_ADDR, MESSAGE_SIZE_TYPE LENGTH, RETURN_CODE_TYPE *RETURN_CODE);
void READ_SAMPLING_MESSAGE(SAMPLING_PORT_ID_TYPE SAMPLING_PORT_ID, MESSAGE_ADDR_TYPE MESSAGE_ADDR, MESSAGE_SIZE_TYPE *LENGTH, VALIDITY_TYPE *VALIDITY, RETURN_CODE_TYPE *RETURN_CODE);
void GET_SAMPLING_PORT_ID(SAMPLING_PORT_NAME_TYPE SAMPLING_PORT_NAME, SAMPLING_PORT_ID_TYPE *SAMPLING_PORT_ID, RETURN_CODE_TYPE *RETURN_CODE);
void GET_SAMPLING_PORT_STATUS(SAMPLING_PORT_ID_TYPE SAMPLING_PORT_ID, SAMPLING_PORT_STATUS_TYPE *SAMPLING_PORT_STATUS, RETURN_CODE_TYPE *RETURN_CODE);
// Interpartition communication - Queuing ports
void CREATE_QUEUING_PORT(QUEUING_PORT_NAME_TYPE QUEUING_PORT_NAME, MESSAGE_SIZE_TYPE MAX_MESSAGE_SIZE, MESSAGE_RANGE_TYPE MAX_NB_MESSAGE, PORT_DIRECTION_TYPE PORT_DIRECTION, QUEUING_DISCIPLINE_TYPE QUEUING_DISCIPLINE, QUEUING_PORT_ID_TYPE *QUEUING_PORT_ID, RETURN_CODE_TYPE *RETURN_CODE);
void SEND_QUEUING_MESSAGE(QUEUING_PORT_ID_TYPE QUEUING_PORT_ID, MESSAGE_ADDR_TYPE MESSAGE_ADDR, MESSAGE_SIZE_TYPE LENGTH, SYSTEM_TIME_TYPE TIME_OUT, RETURN_CODE_TYPE *RETURN_CODE);
void RECEIVE_QUEUING_MESSAGE(QUEUING_PORT_ID_TYPE QUEUING_PORT_ID, SYSTEM_TIME_TYPE TIME_OUT, MESSAGE_ADDR_TYPE MESSAGE_ADDR, MESSAGE_SIZE_TYPE *LENGTH, RETURN_CODE_TYPE *RETURN_CODE);
void GET_QUEUING_PORT_ID(QUEUING_PORT_NAME_TYPE QUEUING_PORT_NAME, QUEUING_PORT_ID_TYPE *QUEUING_PORT_ID, RETURN_CODE_TYPE *RETURN_CODE);
void GET_QUEUING_PORT_STATUS(QUEUING_PORT_ID_TYPE QUEUING_PORT_ID, QUEUING_PORT_STATUS_TYPE *QUEUING_PORT_STATUS, RETURN_CODE_TYPE *RETURN_CODE);

// Intrapartition communication - Buffer services
void CREATE_BUFFER(BUFFER_NAME_TYPE BUFFER_NAME, MESSAGE_SIZE_TYPE MAX_MESSAGE_SIZE, MESSAGE_RANGE_TYPE MAX_NB_MESSAGE, QUEUING_DISCIPLINE_TYPE QUEUING_DISCIPLINE, BUFFER_ID_TYPE *BUFFER_ID, RETURN_CODE_TYPE *RETURN_CODE);
void SEND_BUFFER(BUFFER_ID_TYPE BUFFER_ID, MESSAGE_ADDR_TYPE MESSAGE_ADDR, MESSAGE_SIZE_TYPE LENGTH, SYSTEM_TIME_TYPE TIME_OUT, RETURN_CODE_TYPE *RETURN_CODE);
void RECEIVE_BUFFER(BUFFER_ID_TYPE BUFFER_ID, SYSTEM_TIME_TYPE TIME_OUT, MESSAGE_ADDR_TYPE MESSAGE_ADDR, MESSAGE_SIZE_TYPE *LENGTH, RETURN_CODE_TYPE *RETURN_CODE);
void GET_BUFFER_ID(BUFFER_NAME_TYPE BUFFER_NAME, BUFFER_ID_TYPE *BUFFER_ID, RETURN_CODE_TYPE *RETURN_CODE);
void GET_BUFFER_STATUS(BUFFER_ID_TYPE BUFFER_ID, BUFFER_STATUS_TYPE *BUFFER_STATUS, RETURN_CODE_TYPE *RETURN_CODE);
// Intrapartition communication - Blackboard services
void CREATE_BLACKBOARD(BLACKBOARD_NAME_TYPE BLACKBOARD_NAME, MESSAGE_SIZE_TYPE MAX_MESSAGE_SIZE, BLACKBOARD_ID_TYPE *BLACKBOARD_ID, RETURN_CODE_TYPE *RETURN_CODE);
void DISPLAY_BLACKBOARD(BLACKBOARD_ID_TYPE BLACKBOARD_ID, MESSAGE_ADDR_TYPE MESSAGE_ADDR, MESSAGE_SIZE_TYPE LENGTH, RETURN_CODE_TYPE *RETURN_CODE);
void READ_BLACKBOARD(BLACKBOARD_ID_TYPE BLACKBOARD_ID, SYSTEM_TIME_TYPE TIME_OUT, MESSAGE_ADDR_TYPE MESSAGE_ADDR, MESSAGE_SIZE_TYPE *LENGTH, RETURN_CODE_TYPE *RETURN_CODE);
void CLEAR_BLACKBOARD(BLACKBOARD_ID_TYPE BLACKBOARD_ID, RETURN_CODE_TYPE *RETURN_CODE);
void GET_BLACKBOARD_ID(BLACKBOARD_NAME_TYPE BLACKBOARD_NAME, BLACKBOARD_ID_TYPE *BLACKBOARD_ID, RETURN_CODE_TYPE *RETURN_CODE);
void GET_BLACKBOARD_STATUS(BLACKBOARD_ID_TYPE BLACKBOARD_ID, BLACKBOARD_STATUS_TYPE *BLACKBOARD_STATUS, RETURN_CODE_TYPE *RETURN_CODE);
// Intrapartition communication - Semaphore services
void CREATE_SEMAPHORE(SEMAPHORE_NAME_TYPE SEMAPHORE_NAME, SEMAPHORE_VALUE_TYPE CURRENT_VALUE, SEMAPHORE_VALUE_TYPE MAXIMUM_VALUE, QUEUING_DISCIPLINE_TYPE QUEUING_DISCIPLINE, SEMAPHORE_ID_TYPE *SEMAPHORE_ID, RETURN_CODE_TYPE *RETURN_CODE);
void WAIT_SEMAPHORE(SEMAPHORE_ID_TYPE SEMAPHORE_ID, SYSTEM_TIME_TYPE TIME_OUT, RETURN_CODE_TYPE *RETURN_CODE);
void SIGNAL_SEMAPHORE(SEMAPHORE_ID_TYPE SEMAPHORE_ID, RETURN_CODE_TYPE *RETURN_CODE);
void GET_SEMAPHORE_ID(SEMAPHORE_NAME_TYPE SEMAPHORE_NAME, SEMAPHORE_ID_TYPE *SEMAPHORE_ID, RETURN_CODE_TYPE *RETURN_CODE);
void GET_SEMAPHORE_STATUS(SEMAPHORE_ID_TYPE SEMAPHORE_ID, SEMAPHORE_STATUS_TYPE *SEMAPHORE_STATUS, RETURN_CODE_TYPE *RETURN_CODE);
// Intrapartition communication - Event services
void CREATE_EVENT(EVENT_NAME_TYPE EVENT_NAME, EVENT_ID_TYPE *EVENT_ID, RETURN_CODE_TYPE *RETURN_CODE);
void SET_EVENT(EVENT_ID_TYPE EVENT_ID, RETURN_CODE_TYPE *RETURN_CODE);
void RESET_EVENT(EVENT_ID_TYPE EVENT_ID, RETURN_CODE_TYPE *RETURN_CODE);
void WAIT_EVENT(EVENT_ID_TYPE EVENT_ID, SYSTEM_TIME_TYPE TIME_OUT, RETURN_CODE_TYPE *RETURN_CODE);
void GET_EVENT_ID(EVENT_NAME_TYPE EVENT_NAME, EVENT_ID_TYPE *EVENT_ID, RETURN_CODE_TYPE *RETURN_CODE);
void GET_EVENT_STATUS(EVENT_ID_TYPE EVENT_ID, EVENT_STATUS_TYPE *EVENT_STATUS, RETURN_CODE_TYPE *RETURN_CODE);

// Health monitoring
void REPORT_APPLICATION_MESSAGE(MESSAGE_ADDR_TYPE MESSAGE_ADDR, MESSAGE_SIZE_TYPE LENGTH, RETURN_CODE_TYPE *RETURN_CODE);
void CREATE_ERROR_HANDLER(SYSTEM_ADDRESS_TYPE ENTRY_POINT, STACK_SIZE_TYPE STACK_SIZE, RETURN_CODE_TYPE *RETURN_CODE);
void GET_ERROR_STATUS(ERROR_STATUS_TYPE *ERROR_STATUS, RETURN_CODE_TYPE *RETURN_CODE);
void RAISE_APPLICATION_ERROR(ERROR_CODE_TYPE ERROR_CODE, MESSAGE_ADDR_TYPE MESSAGE_ADDR, ERROR_MESSAGE_SIZE_TYPE LENGTH, RETURN_CODE_TYPE *RETURN_CODE);

// -------------------- STANDARD APEX END --------------------

// -------------------- NON-STANDARD APEX START --------------------

// General
typedef portBOOLEAN BOOLEAN_TYPE;
typedef portCHARACTER CHARACTER_TYPE;
typedef portUINTBASE UINTBASE_TYPE;
typedef portUINTPOINTER UINTPOINTER_TYPE;
typedef portSTACKROW STACKROW_TYPE;
typedef portPARAMETER PARAMETER_TYPE;
typedef portSIZE SIZE_TYPE;
typedef portINDEX INDEX_TYPE;
typedef portIDENTIFIER IDENTIFIER_TYPE;

// Invalid identifier
#define INVALID_IDENTIFIER MAXIMUM_IDENTIFIER_VALUE

// Time management
#define APERIODIC_PERIOD_VALUE 0

// Health monitoring
#define MAX_APPLICATION_MESSAGE_SIZE 512

// System state
typedef enum {
	// When this enumeration is changed, a full revision must be done
	SYSTEMSTATE_MODULEHEALTHMONITORINGCALLBACK = 1,
	SYSTEMSTATE_MODULEDEFAULTPARTITION = 2,
	SYSTEMSTATE_MODULEIDLEPARTITION = 3,
	SYSTEMSTATE_PARTITIONHEALTHMONITORINGCALLBACK = 4,
	SYSTEMSTATE_PARTITIONERRORHANDLER = 5,
	SYSTEMSTATE_PARTITIONDEFAULTPROCESS = 6,
	SYSTEMSTATE_PARTITIONIDLEPROCESS = 7,
	SYSTEMSTATE_PROCESS = 8,
	SYSTEMSTATE_OPERATINGSYSTEM = 9
} SYSTEM_STATE_TYPE;

// Error identifier
typedef enum {
	// General error identifiers - Range from 1 to 99
	ERRORIDENTIFIER_DEADLINEMISSED = 1,
	ERRORIDENTIFIER_APPLICATIONERROR = 2,
	ERRORIDENTIFIER_NUMERICERROR = 3,
	ERRORIDENTIFIER_ILLEGALREQUEST = 4,
	ERRORIDENTIFIER_STACKOVERFLOW = 5,
	ERRORIDENTIFIER_MEMORYVIOLATION = 6,
	ERRORIDENTIFIER_HARDWAREFAULT = 7,
	ERRORIDENTIFIER_POWERFAIL = 8
} ERROR_IDENTIFIER_TYPE;

// Error level
typedef enum {
	ERROR_LEVEL_MODULE = 1, ERROR_LEVEL_PARTITION, ERROR_LEVEL_PROCESS
} ERROR_LEVEL_TYPE;

// Context
struct _CONTEXT_TYPE {
	IDENTIFIER_TYPE IDENTIFIER;
	// Stack attributes
	STACKROW_TYPE *STACK_BOTTOM;
	STACKROW_TYPE *STACK_TOP;
	// Port-specific information
	SYSTEM_ADDRESS_TYPE PORT_CONTEXT;
	// Status attributes
	SIZE_TYPE CORE_DEPTH; // The current depth of core calls
	// Entry and return information
	BOOLEAN_TYPE SYSTEM_PARTITION_CONTEXT; // Indicates the context belongs to a system partition
	SYSTEM_ADDRESS_TYPE ENTRY_POINT;
	SYSTEM_ADDRESS_TYPE RETURN_POINT;
	PARAMETER_TYPE PARAMETER1;
	PARAMETER_TYPE PARAMETER2;
	// System information
	SYSTEM_STATE_TYPE DEFAULT_SYSTEM_STATE;
	SYSTEM_STATE_TYPE SYSTEM_STATE;
};
typedef struct _CONTEXT_TYPE CONTEXT_TYPE;

// Process configuration
struct _PROCESS_CONFIGURATION_TYPE {
	PROCESS_NAME_TYPE NAME;
	SYSTEM_ADDRESS_TYPE PROCESS_STACK_ADDRESS;
	SIZE_TYPE PROCESS_STACK_SIZE;
	SYSTEM_ADDRESS_TYPE PORT_PROCESS_CONFIGURATION;
};
typedef struct _PROCESS_CONFIGURATION_TYPE PROCESS_CONFIGURATION_TYPE;

// Partition configuration schedule window
struct _PARTITION_CONFIGURATION_SCHEDULE_WINDOW_TYPE {
	SYSTEM_TIME_TYPE START; // Window start
	SYSTEM_TIME_TYPE DURATION; // Window duration
	BOOLEAN_TYPE PERIOD_START; // Period start
};
typedef struct _PARTITION_CONFIGURATION_SCHEDULE_WINDOW_TYPE PARTITION_CONFIGURATION_SCHEDULE_WINDOW_TYPE;

// Partition configuration schedule
struct _PARTITION_CONFIGURATION_SCHEDULE_TYPE {
	SYSTEM_TIME_TYPE PERIOD; // Period of the partition
	SYSTEM_TIME_TYPE DURATION; // Duration of the partition's period
	SIZE_TYPE SCHEDULE_WINDOW_SIZE; // SCHEDULE_WINDOW element count
	PARTITION_CONFIGURATION_SCHEDULE_WINDOW_TYPE *SCHEDULE_WINDOW;
};
typedef struct _PARTITION_CONFIGURATION_SCHEDULE_TYPE PARTITION_CONFIGURATION_SCHEDULE_TYPE;

// Partition configuration health monitoring error action
typedef enum {
	PARTITION_CONFIGURATION_HEALTHMONITORING_ERROR_ACTION_IGNORE = 1, PARTITION_CONFIGURATION_HEALTHMONITORING_ERROR_ACTION_IDLE, PARTITION_CONFIGURATION_HEALTHMONITORING_ERROR_ACTION_WARM_START, PARTITION_CONFIGURATION_HEALTHMONITORING_ERROR_ACTION_COLD_START
} PARTITION_CONFIGURATION_HEALTHMONITORING_ERROR_ACTION_TYPE;

// Partition configuration health monitoring error
struct _PARTITION_CONFIGURATION_HEALTHMONITORING_ERROR_TYPE {
	ERROR_IDENTIFIER_TYPE ERROR_IDENTIFIER; // Error identifier
	PARTITION_CONFIGURATION_HEALTHMONITORING_ERROR_ACTION_TYPE ERROR_ACTION; // Error action
};
typedef struct _PARTITION_CONFIGURATION_HEALTHMONITORING_ERROR_TYPE PARTITION_CONFIGURATION_HEALTHMONITORING_ERROR_TYPE;

// Partition configuration health monitoring system state
struct _PARTITION_CONFIGURATION_HEALTHMONITORING_SYSTEMSTATE_TYPE {
	SYSTEM_STATE_TYPE SYSTEM_STATE; // System state
	SIZE_TYPE ERROR_SIZE; // ERROR element count
	PARTITION_CONFIGURATION_HEALTHMONITORING_ERROR_TYPE *ERROR; // Error array
};
typedef struct _PARTITION_CONFIGURATION_HEALTHMONITORING_SYSTEMSTATE_TYPE PARTITION_CONFIGURATION_HEALTHMONITORING_SYSTEMSTATE_TYPE;

// Partition configuration health monitoring
struct _PARTITION_CONFIGURATION_HEALTHMONITORING_TYPE {
	SYSTEM_ADDRESS_TYPE CALLBACK_ENTRY_POINT; // Partition health monitoring callback entry point
	STACK_SIZE_TYPE CALLBACK_STACK_SIZE; // Partition health monitoring callback stack size
	SIZE_TYPE SYSTEMSTATE_SIZE; // SYSTEMSTATE element count
	PARTITION_CONFIGURATION_HEALTHMONITORING_SYSTEMSTATE_TYPE *SYSTEMSTATE; // System state array
};
typedef struct _PARTITION_CONFIGURATION_HEALTHMONITORING_TYPE PARTITION_CONFIGURATION_HEALTHMONITORING_TYPE;

// Partition configuration
struct _PARTITION_CONFIGURATION_TYPE {
	PARTITION_ID_TYPE EXTERNAL_IDENTIFIER;
	PARTITION_NAME_TYPE NAME;
	SIZE_TYPE MAXIMUM_PROCESS_COUNT;
	SIZE_TYPE MAXIMUM_ERRORSTATUS_COUNT;
	SIZE_TYPE MAXIMUM_SAMPLINGPORT_COUNT;
	SIZE_TYPE MAXIMUM_QUEUINGPORT_COUNT;
	SIZE_TYPE MAXIMUM_BUFFER_COUNT;
	SIZE_TYPE MAXIMUM_BLACKBOARD_COUNT;
	SIZE_TYPE MAXIMUM_SEMAPHORE_COUNT;
	SIZE_TYPE MAXIMUM_EVENT_COUNT;
	SYSTEM_ADDRESS_TYPE PARTITION_CODE_ADDRESS;
	SIZE_TYPE PARTITION_CODE_SIZE;
	SYSTEM_ADDRESS_TYPE PARTITION_DATA_ADDRESS;
	SIZE_TYPE PARTITION_DATA_SIZE;
	SYSTEM_ADDRESS_TYPE PARTITION_DATA_IMAGE_ADDRESS;
	SIZE_TYPE PARTITION_DATA_IMAGE_SIZE;
	SYSTEM_ADDRESS_TYPE PARTITION_HEAP_ADDRESS;
	SIZE_TYPE PARTITION_HEAP_SIZE;
	SYSTEM_ADDRESS_TYPE PARTITION_DEFAULTPROCESS_STACK_ADDRESS;
	SIZE_TYPE PARTITION_DEFAULTPROCESS_STACK_SIZE;
	SYSTEM_ADDRESS_TYPE PARTITION_ERRORHANDLER_STACK_ADDRESS;
	SIZE_TYPE PARTITION_ERRORHANDLER_STACK_SIZE;
	SYSTEM_ADDRESS_TYPE PARTITION_HMCALLBACK_STACK_ADDRESS;
	SIZE_TYPE PARTITION_HMCALLBACK_STACK_SIZE;
	PARTITION_CONFIGURATION_SCHEDULE_TYPE *PARTITION_CONFIGURATION_SCHEDULE;
	PARTITION_CONFIGURATION_HEALTHMONITORING_TYPE *PARTITION_CONFIGURATION_HEALTHMONITORING;
	SIZE_TYPE PROCESS_CONFIGURATION_SIZE;
	PROCESS_CONFIGURATION_TYPE *PROCESS_CONFIGURATION;
	SYSTEM_ADDRESS_TYPE PORT_PARTITION_CONFIGURATION;
};
typedef struct _PARTITION_CONFIGURATION_TYPE PARTITION_CONFIGURATION_TYPE;

// Module configuration connection table sampling port mapping standard partition
struct _MODULE_CONFIGURATION_CONNECTIONTABLE_SAMPLINGPORTMAPPING_STANDARDPARTITION_TYPE {
	PARTITION_ID_TYPE PARTITION_EXTERNAL_IDENTIFIER;
	SAMPLING_PORT_NAME_TYPE SAMPLINGPORT_NAME;
};
typedef struct _MODULE_CONFIGURATION_CONNECTIONTABLE_SAMPLINGPORTMAPPING_STANDARDPARTITION_TYPE MODULE_CONFIGURATION_CONNECTIONTABLE_SAMPLINGPORTMAPPING_STANDARDPARTITION_TYPE;

// Module configuration connection table sampling port mapping
struct _MODULE_CONFIGURATION_CONNECTIONTABLE_SAMPLINGPORTMAPPING_TYPE {
	PORT_MODULE_CONFIGURATION_CONNECTIONTABLE_SAMPLINGPORTMAPPING_PSEUDOPARTITION_TYPE *PSEUDO_PARTITION;
	MODULE_CONFIGURATION_CONNECTIONTABLE_SAMPLINGPORTMAPPING_STANDARDPARTITION_TYPE *STANDARD_PARTITION;
};
typedef struct _MODULE_CONFIGURATION_CONNECTIONTABLE_SAMPLINGPORTMAPPING_TYPE MODULE_CONFIGURATION_CONNECTIONTABLE_SAMPLINGPORTMAPPING_TYPE;

// Module configuration connection table sampling port
struct _MODULE_CONFIGURATION_CONNECTIONTABLE_SAMPLINGPORT_TYPE {
	MODULE_CONFIGURATION_CONNECTIONTABLE_SAMPLINGPORTMAPPING_TYPE *SOURCE;
	SIZE_TYPE DESTINATION_SIZE;
	MODULE_CONFIGURATION_CONNECTIONTABLE_SAMPLINGPORTMAPPING_TYPE *DESTINATION;
};
typedef struct _MODULE_CONFIGURATION_CONNECTIONTABLE_SAMPLINGPORT_TYPE MODULE_CONFIGURATION_CONNECTIONTABLE_SAMPLINGPORT_TYPE;

// Module configuration connection table queuing port mapping standard partition
struct _MODULE_CONFIGURATION_CONNECTIONTABLE_QUEUINGPORTMAPPING_STANDARDPARTITION_TYPE {
	PARTITION_ID_TYPE PARTITION_EXTERNAL_IDENTIFIER;
	QUEUING_PORT_NAME_TYPE QUEUINGPORT_NAME;
};
typedef struct _MODULE_CONFIGURATION_CONNECTIONTABLE_QUEUINGPORTMAPPING_STANDARDPARTITION_TYPE MODULE_CONFIGURATION_CONNECTIONTABLE_QUEUINGPORTMAPPING_STANDARDPARTITION_TYPE;

// Module configuration connection table queuing port mapping
struct _MODULE_CONFIGURATION_CONNECTIONTABLE_QUEUINGPORTMAPPING_TYPE {
	PORT_MODULE_CONFIGURATION_CONNECTIONTABLE_QUEUINGPORTMAPPING_PSEUDOPARTITION_TYPE *PSEUDO_PARTITION;
	MODULE_CONFIGURATION_CONNECTIONTABLE_QUEUINGPORTMAPPING_STANDARDPARTITION_TYPE *STANDARD_PARTITION;
};
typedef struct _MODULE_CONFIGURATION_CONNECTIONTABLE_QUEUINGPORTMAPPING_TYPE MODULE_CONFIGURATION_CONNECTIONTABLE_QUEUINGPORTMAPPING_TYPE;

// Module configuration connection table queuing port
struct _MODULE_CONFIGURATION_CONNECTIONTABLE_QUEUINGPORT_TYPE {
	MODULE_CONFIGURATION_CONNECTIONTABLE_QUEUINGPORTMAPPING_TYPE *SOURCE;
	MODULE_CONFIGURATION_CONNECTIONTABLE_QUEUINGPORTMAPPING_TYPE *DESTINATION;
};
typedef struct _MODULE_CONFIGURATION_CONNECTIONTABLE_QUEUINGPORT_TYPE MODULE_CONFIGURATION_CONNECTIONTABLE_QUEUINGPORT_TYPE;

// Module configuration connection table
struct _MODULE_CONFIGURATION_CONNECTIONTABLE_TYPE {
	SIZE_TYPE SAMPLINGPORT_SIZE; // SAMPLINGPORT element count
	MODULE_CONFIGURATION_CONNECTIONTABLE_SAMPLINGPORT_TYPE *SAMPLINGPORT; // Sampling port array
	SIZE_TYPE QUEUINGPORT_SIZE; // QUEUINGPORT element count
	MODULE_CONFIGURATION_CONNECTIONTABLE_QUEUINGPORT_TYPE *QUEUINGPORT; // Queuing port array
};
typedef struct _MODULE_CONFIGURATION_CONNECTIONTABLE_TYPE MODULE_CONFIGURATION_CONNECTIONTABLE_TYPE;

// Module configuration health monitoring error action
typedef enum {
	MODULE_CONFIGURATION_HEALTHMONITORING_ERROR_ACTION_IGNORE = 1, MODULE_CONFIGURATION_HEALTHMONITORING_ERROR_ACTION_SHUTDOWN, MODULE_CONFIGURATION_HEALTHMONITORING_ERROR_ACTION_RESET
} MODULE_CONFIGURATION_HEALTHMONITORING_ERROR_ACTION_TYPE;

// Module configuration health monitoring error
struct _MODULE_CONFIGURATION_HEALTHMONITORING_ERROR_TYPE {
	ERROR_IDENTIFIER_TYPE ERROR_IDENTIFIER; // Error identifier
	ERROR_LEVEL_TYPE ERROR_LEVEL; // Error level
	ERROR_CODE_TYPE ERROR_CODE; // Error code
	MODULE_CONFIGURATION_HEALTHMONITORING_ERROR_ACTION_TYPE ERROR_ACTION; // Error action
};
typedef struct _MODULE_CONFIGURATION_HEALTHMONITORING_ERROR_TYPE MODULE_CONFIGURATION_HEALTHMONITORING_ERROR_TYPE;

// Module configuration health monitoring system state
struct _MODULE_CONFIGURATION_HEALTHMONITORING_SYSTEMSTATE_TYPE {
	SYSTEM_STATE_TYPE SYSTEM_STATE; // System state
	SIZE_TYPE ERROR_SIZE; // ERROR element count
	MODULE_CONFIGURATION_HEALTHMONITORING_ERROR_TYPE *ERROR; // Error array
};
typedef struct _MODULE_CONFIGURATION_HEALTHMONITORING_SYSTEMSTATE_TYPE MODULE_CONFIGURATION_HEALTHMONITORING_SYSTEMSTATE_TYPE;

// Module configuration health monitoring
struct _MODULE_CONFIGURATION_HEALTHMONITORING_TYPE {
	SYSTEM_ADDRESS_TYPE CALLBACK_ENTRY_POINT; // Module health monitoring callback entry point
	STACK_SIZE_TYPE CALLBACK_STACK_SIZE; // Module health monitoring callback stack size
	SIZE_TYPE SYSTEMSTATE_SIZE; // SYSTEMSTATE element count
	MODULE_CONFIGURATION_HEALTHMONITORING_SYSTEMSTATE_TYPE *SYSTEMSTATE; // System state array
};
typedef struct _MODULE_CONFIGURATION_HEALTHMONITORING_TYPE MODULE_CONFIGURATION_HEALTHMONITORING_TYPE;

// Module configuration
struct _MODULE_CONFIGURATION_TYPE {
	SIZE_TYPE MAXIMUM_PARTITION_COUNT;
	SYSTEM_ADDRESS_TYPE MODULE_STACK_ADDRESS;
	SIZE_TYPE MODULE_STACK_SIZE;
	SYSTEM_ADDRESS_TYPE MODULE_CODE_ADDRESS;
	SIZE_TYPE MODULE_CODE_SIZE;
	SYSTEM_ADDRESS_TYPE MODULE_DATA_ADDRESS;
	SIZE_TYPE MODULE_DATA_SIZE;
	SYSTEM_ADDRESS_TYPE MODULE_HEAP_ADDRESS;
	SIZE_TYPE MODULE_HEAP_SIZE;
	SYSTEM_ADDRESS_TYPE MODULE_HMCALLBACK_STACK_ADDRESS;
	SIZE_TYPE MODULE_HMCALLBACK_STACK_SIZE;
	SYSTEM_TIME_TYPE MAJORFRAME_DURATION; // Module major frame duration
	MODULE_CONFIGURATION_CONNECTIONTABLE_TYPE *MODULE_CONFIGURATION_CONNECTIONTABLE;
	MODULE_CONFIGURATION_HEALTHMONITORING_TYPE *MODULE_CONFIGURATION_HEALTHMONITORING;
	SIZE_TYPE PARTITION_CONFIGURATION_SIZE;
	PARTITION_CONFIGURATION_TYPE *PARTITION_CONFIGURATION;
	SYSTEM_ADDRESS_TYPE PORT_MODULE_CONFIGURATION;
};
typedef struct _MODULE_CONFIGURATION_TYPE MODULE_CONFIGURATION_TYPE;

// System configuration health monitoring error action
typedef enum {
	SYSTEM_CONFIGURATION_HEALTHMONITORING_ERROR_ACTION_SHUTDOWN, SYSTEM_CONFIGURATION_HEALTHMONITORING_ERROR_ACTION_RESET
} SYSTEM_CONFIGURATION_HEALTHMONITORING_ERROR_ACTION_TYPE;

// System configuration health monitoring error
struct _SYSTEM_CONFIGURATION_HEALTHMONITORING_ERROR_TYPE {
	ERROR_IDENTIFIER_TYPE ERROR_IDENTIFIER; // Error identifier
	SYSTEM_CONFIGURATION_HEALTHMONITORING_ERROR_ACTION_TYPE ERROR_ACTION; // Error action
};
typedef struct _SYSTEM_CONFIGURATION_HEALTHMONITORING_ERROR_TYPE SYSTEM_CONFIGURATION_HEALTHMONITORING_ERROR_TYPE;

// System configuration health monitoring
struct _SYSTEM_CONFIGURATION_HEALTHMONITORING_TYPE {
	SIZE_TYPE ERROR_SIZE; // ERROR element count
	SYSTEM_CONFIGURATION_HEALTHMONITORING_ERROR_TYPE *ERROR; // Error array
};
typedef struct _SYSTEM_CONFIGURATION_HEALTHMONITORING_TYPE SYSTEM_CONFIGURATION_HEALTHMONITORING_TYPE;

// System configuration
struct _SYSTEM_CONFIGURATION_TYPE {
	SYSTEM_ADDRESS_TYPE SYSTEM_CODE_ADDRESS;
	SIZE_TYPE SYSTEM_CODE_SIZE;
	SYSTEM_ADDRESS_TYPE SYSTEM_DATA_ADDRESS;
	SIZE_TYPE SYSTEM_DATA_SIZE;
	SYSTEM_CONFIGURATION_HEALTHMONITORING_TYPE *SYSTEM_CONFIGURATION_HEALTHMONITORING;
	SYSTEM_ADDRESS_TYPE PORT_SYSTEM_CONFIGURATION;
};
typedef struct _SYSTEM_CONFIGURATION_TYPE SYSTEM_CONFIGURATION_TYPE;

// Partition attribute
struct _PARTITION_ATTRIBUTE_TYPE {
	PARTITION_NAME_TYPE NAME;
	SYSTEM_ADDRESS_TYPE ENTRY_POINT;
	STACK_SIZE_TYPE STACK_SIZE;
	BOOLEAN_TYPE SYSTEMPARTITION;
};
typedef struct _PARTITION_ATTRIBUTE_TYPE PARTITION_ATTRIBUTE_TYPE;

// System management
void STARTUP_SYSTEM(RETURN_CODE_TYPE *RETURN_CODE);
void RUN_SYSTEM(RETURN_CODE_TYPE *RETURN_CODE);

// Module management
void STARTUP_MODULE(RETURN_CODE_TYPE *RETURN_CODE);
void SET_MODULE_MODE(OPERATING_MODE_TYPE OPERATING_MODE, RETURN_CODE_TYPE *RETURN_CODE);

// Partition management
void GET_PARTITION_ID(PARTITION_NAME_TYPE PARTITION_NAME, PARTITION_ID_TYPE *PARTITION_ID, RETURN_CODE_TYPE *RETURN_CODE);
void CREATE_PARTITION(PARTITION_ATTRIBUTE_TYPE *ATTRIBUTES, PARTITION_ID_TYPE *PARTITION_ID, RETURN_CODE_TYPE *RETURN_CODE);

// -------------------- NON-STANDARD APEX END --------------------

// -------------------- PREDEFINED SYSTEM PARTITIONS START --------------------

// I/O system partition
void SYSTEMPARTITION_IO(void);
void SYSTEMPARTITION_IO_HMCALLBACK(SYSTEM_STATE_TYPE SYSTEM_STATE, ERROR_IDENTIFIER_TYPE ERROR_IDENTIFIER);

// USB system partition
void SYSTEMPARTITION_USB(void);
void SYSTEMPARTITION_USB_HMCALLBACK(SYSTEM_STATE_TYPE SYSTEM_STATE, ERROR_IDENTIFIER_TYPE ERROR_IDENTIFIER);

// -------------------- PREDEFINED SYSTEM PARTITIONS END --------------------

#endif
